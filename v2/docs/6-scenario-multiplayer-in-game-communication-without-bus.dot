digraph MPGameSync_Direct {
    rankdir=TD;
    sep="0.6";
    overlap=false;
    bgcolor="transparent";
    fontname="Arial";
    node [shape=box, style="rounded,filled", fontcolor="#eeeeee", color="#eeeeee", fontname="Arial"];
    edge [fontcolor="#eeeeee", color="#eeeeee", fontname="Arial"];
    graph [label="Multiplayer In-Game Sync Flow (Direct Event View)", labelloc=t, fontsize=16, fontcolor="#eeeeee"];

    // Node Styles (Dark fill, specific border remains)
    MultiplayerGame [shape="record", fillcolor="#343a40", color="#20c997", penwidth=2,
                     label="{ MP Game (Host Logic) | {<emits_q> Emits: MP.Question} | {<emits_score> Emits: MP.ScoreUpdate} | {<emits_result> Emits: MP.AnswerResult} | {<handles_answer> Handles: WebRTC.MessageReceived (Answer)} }"]; // Specific emits/handles
    MultiplayerClientManager [shape="record", style="rounded,filled", fillcolor="#343a40", color="#ffc107", penwidth=2,
                              label="{ MP Client Mgr | {<handles_sync> Handles: MP.Question / ScoreUpdate / AnswerResult} | {<handles_ui_in> Handles: UI.AnswerSubmitted} | {<emits_ui_out> Emits: System.UpdateGameUI} }"]; // Removed fillcolor=white
    QuizEngine [label="QuizEngine", style="rounded,filled", fillcolor="#343a40", color="#ffc107", penwidth=2]; // Removed fillcolor=white
    WebRTCManager [shape="record", style="rounded,filled", fillcolor="#343a40", color="#ffc107", penwidth=2,
                   label="{ WebRTCManager | {<emits_rtc> Emits: WebRTC.MessageReceived (Answer)} }"]; // Removed fillcolor=white, Specific emit
    AnswerListComponent [shape="record", style="rounded,filled", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                         label="{ AnswerList (Client UI) | {<emits_ui> Emits: UI.AnswerSubmitted} }"]; // Removed fillcolor=white, Specific emit
    GameUI [shape="record", style="rounded,filled", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
            label="{ Game UI Components | {<handles_update> Handles: System.UpdateGameUI} }"]; // Removed fillcolor=white, Specific handles

    // 1. Host Sends Question / State Sync -> Client Manager (Direct Event Flows)
    // These flows imply WebRTC transport
    MultiplayerGame:emits_q -> MultiplayerClientManager:handles_sync [label=" MP.Question"];
    MultiplayerGame:emits_score -> MultiplayerClientManager:handles_sync [label=" MP.ScoreUpdate"];
    MultiplayerGame:emits_result -> MultiplayerClientManager:handles_sync [label=" MP.AnswerResult"];

    // 2. Client Manager Updates UI (Direct Event Flow)
    MultiplayerClientManager:emits_ui_out -> GameUI:handles_update [label=" System.UpdateGameUI"];

    // 3. Client Submits Answer -> Client Manager (Direct Event Flow)
    AnswerListComponent:emits_ui -> MultiplayerClientManager:handles_ui_in [label=" UI.AnswerSubmitted"];

    // 4. Client Manager Sends Answer to Host (Direct Call)
    MultiplayerClientManager -> WebRTCManager [label=" Calls WebRTC (Send Answer)", style=dashed];

    // 5. Host Receives Answer via WebRTC -> Host Logic (Direct Event Flow)
    // This flow implies WebRTC transport
    WebRTCManager:emits_rtc -> MultiplayerGame:handles_answer [label=" WebRTC.MessageReceived (Answer)"];

    // 6. Host Checks Answer & Broadcasts Result/Score (Direct Call + Events -> Step 1)
    MultiplayerGame -> QuizEngine [label=" Calls checkAnswer", style=dashed];
    // Emits events that flow directly as shown in Step 1
} 