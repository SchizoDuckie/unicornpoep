digraph GameplayLoop_Direct {
    rankdir=TD;
    sep="0.6";
    overlap=false;
    bgcolor="transparent";
    fontname="Arial";
    node [shape=box, style="rounded,filled", fontcolor="#eeeeee", color="#eeeeee", fontname="Arial"];
    edge [fontcolor="#eeeeee", color="#eeeeee", fontname="Arial"];
    graph [label="Core Gameplay Loop (SP/Practice) (Direct Event View)", labelloc=t, fontsize=16, fontcolor="#eeeeee"];

    // Node Styles (Dark fill, specific border remains)
    BaseGameMode [shape="record", fillcolor="#343a40", color="#20c997", penwidth=2,
                  label="{ BaseGameMode | {<emits_qready> Emits: Game.QuestionReady} | {<emits_score> Emits: Game.ScoreUpdated} | {<emits_finish> Emits: Game.Finished} | {<handles_ui> Handles: UI.AnswerSubmitted} | {<handles_timer> Handles: Game.TimeUp} }"];
    QuizEngine [shape="record", fillcolor="#343a40", color="#ffc107", penwidth=2,
                label="{ QuizEngine | {<emits_logic> Emits: Game.AnswerChecked} }"];
    Timer [shape="record", fillcolor="#343a40", color="#ffc107", penwidth=2,
           label="{ Timer | {<emits_tick> Emits: Game.TimerTick} | {<emits_timeup> Emits: Game.TimeUp} }"];
    QuestionDisplayComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                              label="{ QuestionDisplay | {<handles_state> Handles: Game State Events} }"];
    AnswerListComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                         label="{ AnswerList | {<handles_state> Handles: Game State Events} | {<emits_ui> Emits: UI.AnswerSubmitted} | {<handles_logic> Handles: Game.AnswerChecked} }"];
    ProgressDisplayComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                              label="{ ProgressDisplay | {<handles_state> Handles: Game State Events} }"];
    ScoreDisplayComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                         label="{ ScoreDisplay | {<handles_state> Handles: Game State Events} | {<handles_score> Handles: Game.ScoreUpdated} }"];
    TimerDisplayComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                           label="{ TimerDisplay | {<handles_state> Handles: Game State Events} | {<handles_timer> Handles: Game.TimerTick} }"];
    GameFeedbackComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                           label="{ GameFeedback | {<handles_logic> Handles: Game.AnswerChecked} }"];

    // 1. Game Flow Events -> Listeners (Direct Event Flows)
    BaseGameMode:emits_qready -> QuestionDisplayComponent:handles_state [label=" Game State Event"];
    BaseGameMode:emits_qready -> AnswerListComponent:handles_state [label=" Game State Event"];
    BaseGameMode:emits_qready -> ProgressDisplayComponent:handles_state [label=" Game State Event"];
    BaseGameMode:emits_qready -> ScoreDisplayComponent:handles_state [label=" Game State Event"];
    BaseGameMode:emits_qready -> TimerDisplayComponent:handles_state [label=" Game State Event"];
    BaseGameMode:emits_score -> ScoreDisplayComponent:handles_score [label=" Game.ScoreUpdated"]; // Specific target
    BaseGameMode:emits_finish -> QuestionDisplayComponent:handles_state [label=" Game State Event"]; // Assuming finished is handled as general state
    // ... other state -> handlers ...

    // 2. User Interaction -> Game Mode (Direct Event Flow)
    AnswerListComponent:emits_ui -> BaseGameMode:handles_ui [label=" UI.AnswerSubmitted"];

    // 3. Answer Processing -> UI (Direct Event Flow)
    BaseGameMode -> QuizEngine [label=" Calls checkAnswer", style=dashed];
    QuizEngine:emits_logic -> GameFeedbackComponent:handles_logic [label=" Game.AnswerChecked"];
    QuizEngine:emits_logic -> AnswerListComponent:handles_logic [label=" Game.AnswerChecked"];

    // 4. Timer -> UI / Game Mode (Direct Event Flows)
    BaseGameMode -> Timer [label=" Calls start/stop", style=dashed];
    Timer:emits_tick -> TimerDisplayComponent:handles_timer [label=" Game.TimerTick"];
    Timer:emits_timeup -> BaseGameMode:handles_timer [label=" Game.TimeUp"];
} 