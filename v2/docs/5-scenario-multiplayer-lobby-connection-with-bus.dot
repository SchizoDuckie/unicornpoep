digraph MPLobby_WithBus {
    rankdir=TD;
    sep="0.6";
    overlap=false;
    bgcolor="transparent";
    fontname="Arial";
    node [shape=box, style="rounded,filled", fontcolor="#eeeeee", color="#eeeeee", fontname="Arial"];
    edge [fontcolor="#eeeeee", color="#eeeeee", fontname="Arial"];
    graph [label="Multiplayer Lobby & Connection Flow (Showing EventBus)", labelloc=t, fontsize=16, fontcolor="#eeeeee"];

    // Node Styles (Dark fill, specific border remains)
    MultiplayerChoiceComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                                label="{ MP Choice UI | {<emits_host> Emits: UI.MultiplayerChoice.HostClicked} | {<emits_join> Emits: UI.MultiplayerChoice.JoinClicked} }"]; // Updated emits
    HostLobbyComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                        label="{ Host Lobby UI | {<handles_init> Handles: WebRTC.HostInitialized} | {<handles_list> Handles: MP.Common.PlayerListUpdated} | {<handles_error> Handles: MP.Host.ErrorOccurred} | {<emits_start> Emits: UI.HostLobby.StartGameClicked} }"]; // Updated handles/emits
    JoinLobbyComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                        label="{ Join Lobby UI | {<handles_conn> Handles: WebRTC.ConnectedToHost} | {<handles_fail> Handles: WebRTC.ConnectionFailed} | {<handles_info> Handles: MP.Client.GameInfoReceived} | {<emits_submit> Emits: UI.JoinLobby.SubmitCodeClicked} | {<emits_confirm> Emits: UI.JoinLobby.ConfirmClicked} | {<emits_cancel> Emits: UI.JoinLobby.CancelClicked} }"]; // Updated handles/emits
    PlayerListComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                         label="{ Player List UI | {<handles_state> Handles: MP.Common.PlayerListUpdated} }"]; // Updated handle
    GameCoordinator [shape="record", fillcolor="#343a40", color="#e6e0f8", penwidth=2,
                     label="{ GameCoordinator | {<handles_choice> Handles: UI.MultiplayerChoice.HostClicked / JoinClicked} | {<handles_lobby> Handles: UI.HostLobby.StartGameClicked} | {<emits_nav> Emits: System.Navigate} }"]; // Updated handles
    UIManager [shape="record", fillcolor="#343a40", color="#e6e0f8", penwidth=2,
               label="{ UIManager | {<handles_nav> Handles: System.Navigate} }"];
    WebRTCManager [shape="record", fillcolor="#343a40", color="#ffc107", penwidth=2,
                   label="{ WebRTCManager | {<emits_init> Emits: WebRTC.HostInitialized} | {<emits_conn> Emits: WebRTC.ConnectedToHost} | {<emits_fail> Emits: WebRTC.ConnectionFailed} | {<emits_cli_conn> Emits: WebRTC.ClientConnected} | {<emits_cli_dis> Emits: WebRTC.ClientDisconnected} | {<emits_msg> Emits: WebRTC.MessageReceived} | {<emits_player_update> Emits: MP.Common.PlayerListUpdated} | {<emits_host_error> Emits: MP.Host.ErrorOccurred} }"]; // Updated emits
    MultiplayerGame [shape="record", fillcolor="#343a40", color="#20c997", penwidth=2,
                     label="{ MP Game (Host Logic) | {<handles_rtc> Handles: WebRTC.ClientConnected/Disconnected} }"]; // Simplified, uses WebRTCManager for messages
    MultiplayerClientManager [shape="record", style="rounded,filled", fillcolor="#343a40", color="#ffc107", penwidth=2,
                              label="{ MP Client Mgr | {<handles_rtc> Handles: WebRTC.ConnectedToHost/Failed} | {<handles_msg> Handles: WebRTC.MessageReceived (GameInfo)} | {<emits_info> Emits: MP.Client.GameInfoReceived} }"]; // Updated handles/emits
    QuizEngine [label="QuizEngine", style="rounded,filled", fillcolor="#343a40", color="#ffc107", penwidth=2];
    QuestionsManager [label="QuestionsManager", fillcolor="#343a40", color="#ffc107", penwidth=2]; // Added node

    // EventBus: Specific events or useful groups for lobby flow
    EventBus [shape="record", fillcolor="#343a40", color="#aaaaaa", penwidth=2,
              label="{ EventBus | {<evUIHost> UI.MultiplayerChoice.HostClicked} | {<evUIJoin> UI.MultiplayerChoice.JoinClicked} | {<evUIStart> UI.HostLobby.StartGameClicked} | {<evUISubmit> UI.JoinLobby.SubmitCodeClicked} | {<evUIConfirm> UI.JoinLobby.ConfirmClicked} | {<evUICancel> UI.JoinLobby.CancelClicked} | {<evWebRTC> WebRTC Events} | {<evPlayerListUpdate> MP.Common.PlayerListUpdated} | {<evNav> System.Navigate} | {<evHostErr> MP.Host.ErrorOccurred} | {<evClientInfo> MP.Client.GameInfoReceived} }"];

    // 1. User Chooses Host/Join (Specific Events)
    MultiplayerChoiceComponent:emits_host -> EventBus:evUIHost; MultiplayerChoiceComponent:emits_join -> EventBus:evUIJoin;
    EventBus:evUIHost -> GameCoordinator:handles_choice; EventBus:evUIJoin -> GameCoordinator:handles_choice;

    // 2. Coordinator Initiates Connection (Direct Call + Event)
    GameCoordinator -> WebRTCManager [label=" Calls initHost / connectToHost", style=dashed];
    GameCoordinator:emits_nav -> EventBus:evNav [label=" (to Lobby View)"];
    EventBus:evNav -> UIManager:handles_nav;
    UIManager -> HostLobbyComponent [label=" Calls show()", style=dashed]; UIManager -> JoinLobbyComponent [label=" Calls show()", style=dashed];

    // 3. WebRTC Reports Status (Host Init, Client Connect/Fail)
    WebRTCManager:emits_init -> EventBus:evWebRTC; WebRTCManager:emits_conn -> EventBus:evWebRTC; WebRTCManager:emits_fail -> EventBus:evWebRTC;
    EventBus:evWebRTC -> HostLobbyComponent:handles_init [label=" (Handles HostInit)"];
    EventBus:evWebRTC -> JoinLobbyComponent:handles_conn [label=" (Handles Client Conn/Fail)"];
    EventBus:evWebRTC -> MultiplayerClientManager:handles_rtc [label=" (Handles Client Conn/Fail)"];

    // 4. Client Submits Code
    JoinLobbyComponent:emits_submit -> EventBus:evUISubmit;
    EventBus:evUISubmit -> GameCoordinator:handles_choice [label=" (Implicitly starts connection via WebRTCManager call)"];

    // 5. Host Sends Game Info (via WebRTCManager)
    WebRTCManager:emits_msg -> EventBus:evWebRTC [label=" (Type: GameInfo)"];

    // 6. Client Manager Handles Game Info & Saves Custom Sheets
    EventBus:evWebRTC -> MultiplayerClientManager:handles_msg [label=""];
    MultiplayerClientManager -> QuestionsManager [label=" Calls addReceivedCustomSheet()", style=dashed, arrowhead=open]; // Added Save Call
    MultiplayerClientManager:emits_info -> EventBus:evClientInfo; // Client Manager emits structured info

    // 7. Join Lobby UI Displays Game Info
    EventBus:evClientInfo -> JoinLobbyComponent:handles_info;

    // 8. Client Confirms/Cancels Join
    JoinLobbyComponent:emits_confirm -> EventBus:evUIConfirm; JoinLobbyComponent:emits_cancel -> EventBus:evUICancel;
    EventBus:evUIConfirm -> GameCoordinator:handles_choice [label=" (Triggers final join logic)"];
    EventBus:evUICancel -> GameCoordinator:handles_choice [label=" (Triggers cancellation logic)"];

    // 9. WebRTC Reports Player Connect/Disconnect
    WebRTCManager:emits_cli_conn -> EventBus:evWebRTC; WebRTCManager:emits_cli_dis -> EventBus:evWebRTC;
    EventBus:evWebRTC -> MultiplayerGame:handles_rtc; // Host notified

    // 10. Host Logic Updates Player List (via WebRTCManager emitting PlayerListUpdated)
    MultiplayerGame -> WebRTCManager [label=" Updates Internal List", style=dashed]; // Host logic updates internal list
    WebRTCManager:emits_player_update -> EventBus:evPlayerListUpdate; // WebRTCManager emits the update event

    // 11. UI Updates Player List
    EventBus:evPlayerListUpdate -> HostLobbyComponent:handles_list;
    EventBus:evPlayerListUpdate -> JoinLobbyComponent:handles_state; // Client lobby might show list too
    EventBus:evPlayerListUpdate -> PlayerListComponent:handles_state; // In-game list component

    // 12. Host Starts Game
    HostLobbyComponent:emits_start -> EventBus:evUIStart [label=""];
    EventBus:evUIStart -> GameCoordinator:handles_lobby [label=""];
    
    // 13. Host Errors
    WebRTCManager:emits_host_error -> EventBus:evHostErr; // Assuming WebRTC or Host Logic emits this
    EventBus:evHostErr -> HostLobbyComponent:handles_error;
} 