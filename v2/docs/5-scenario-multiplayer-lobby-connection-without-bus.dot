digraph MPLobby_Direct {
    rankdir=TD;
    sep="0.6";
    overlap=false;
    bgcolor="transparent";
    fontname="Arial";
    node [shape=box, style="rounded,filled", fontcolor="#eeeeee", color="#eeeeee", fontname="Arial"];
    edge [fontcolor="#eeeeee", color="#eeeeee", fontname="Arial"];
    graph [label="Multiplayer Lobby & Connection Flow (Direct Event View)", labelloc=t, fontsize=16, fontcolor="#eeeeee"];

    // Node Styles (Dark fill, specific border remains)
    MultiplayerChoiceComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                                label="{ MP Choice UI | {<emits_host> Emits: UI.MultiplayerChoice.HostClicked} | {<emits_join> Emits: UI.MultiplayerChoice.JoinClicked} }"]; // Updated emits
    HostLobbyComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                        label="{ Host Lobby UI | {<handles_init> Handles: WebRTC.HostInitialized} | {<handles_list> Handles: MP.Common.PlayerListUpdated} | {<handles_error> Handles: MP.Host.ErrorOccurred} | {<emits_start> Emits: UI.HostLobby.StartGameClicked} }"]; // Updated handles/emits
    JoinLobbyComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                        label="{ Join Lobby UI | {<handles_conn> Handles: WebRTC.ConnectedToHost} | {<handles_fail> Handles: WebRTC.ConnectionFailed} | {<handles_info> Handles: MP.Client.GameInfoReceived} | {<emits_submit> Emits: UI.JoinLobby.SubmitCodeClicked} | {<emits_confirm> Emits: UI.JoinLobby.ConfirmClicked} | {<emits_cancel> Emits: UI.JoinLobby.CancelClicked} }"]; // Updated handles/emits
    PlayerListComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                         label="{ Player List UI | {<handles_state> Handles: MP.Common.PlayerListUpdated} }"]; // Updated handle
    GameCoordinator [shape="record", fillcolor="#343a40", color="#e6e0f8", penwidth=2,
                     label="{ GameCoordinator | {<handles_choice> Handles: UI.MultiplayerChoice.HostClicked / JoinClicked} | {<handles_lobby> Handles: UI.HostLobby.StartGameClicked} | {<handles_join_submit> Handles: UI.JoinLobby.SubmitCodeClicked} | {<handles_join_confirm> Handles: UI.JoinLobby.ConfirmClicked} | {<handles_join_cancel> Handles: UI.JoinLobby.CancelClicked} | {<emits_nav> Emits: System.Navigate} }"]; // Updated handles
    UIManager [shape="record", fillcolor="#343a40", color="#e6e0f8", penwidth=2,
               label="{ UIManager | {<handles_nav> Handles: System.Navigate} }"];
    WebRTCManager [shape="record", fillcolor="#343a40", color="#ffc107", penwidth=2,
                   label="{ WebRTCManager | {<emits_init> Emits: WebRTC.HostInitialized} | {<emits_conn> Emits: WebRTC.ConnectedToHost} | {<emits_fail> Emits: WebRTC.ConnectionFailed} | {<emits_cli_conn> Emits: WebRTC.ClientConnected} | {<emits_cli_dis> Emits: WebRTC.ClientDisconnected} | {<emits_msg> Emits: WebRTC.MessageReceived} | {<emits_player_update> Emits: MP.Common.PlayerListUpdated} | {<emits_host_error> Emits: MP.Host.ErrorOccurred} }"]; // Updated emits
    MultiplayerGame [shape="record", fillcolor="#343a40", color="#20c997", penwidth=2,
                     label="{ MP Game (Host Logic) | {<handles_rtc> Handles: WebRTC.ClientConnected/Disconnected} }"]; // Simplified
    MultiplayerClientManager [shape="record", style="rounded,filled", fillcolor="#343a40", color="#ffc107", penwidth=2,
                              label="{ MP Client Mgr | {<handles_rtc> Handles: WebRTC.ConnectedToHost/Failed} | {<handles_msg> Handles: WebRTC.MessageReceived (GameInfo)} | {<emits_info> Emits: MP.Client.GameInfoReceived} }"]; // Updated handles/emits
    QuestionsManager [label="QuestionsManager", fillcolor="#343a40", color="#ffc107", penwidth=2]; // Added node
    QuizEngine [label="QuizEngine", style="rounded,filled", fillcolor="#343a40", color="#ffc107", penwidth=2];

    // EventBus: Specific events or useful groups for lobby flow
    // EventBus node removed for direct view

    // 1. User Chooses Host/Join -> Coordinator (Direct Event Flows)
    MultiplayerChoiceComponent:emits_host -> GameCoordinator:handles_choice [label=" UI.MultiplayerChoice.HostClicked"];
    MultiplayerChoiceComponent:emits_join -> GameCoordinator:handles_choice [label=" UI.MultiplayerChoice.JoinClicked"];

    // 2. Coordinator Initiates Connection (Direct Call + Event)
    GameCoordinator -> WebRTCManager [label=" Calls initHost / connectToHost", style=dashed];
    GameCoordinator:emits_nav -> UIManager:handles_nav [label=" System.Navigate (to Lobby View)"]; // Direct Nav Event
    UIManager -> HostLobbyComponent [label=" Calls show()", style=dashed]; UIManager -> JoinLobbyComponent [label=" Calls show()", style=dashed];

    // 3. WebRTC Reports Status -> UI / Client Manager (Direct Event Flows)
    WebRTCManager:emits_init -> HostLobbyComponent:handles_init [label=" WebRTC.HostInitialized"];
    WebRTCManager:emits_conn -> JoinLobbyComponent:handles_conn [label=" WebRTC.ConnectedToHost"];
    WebRTCManager:emits_conn -> MultiplayerClientManager:handles_rtc [label=" WebRTC.ConnectedToHost"];
    WebRTCManager:emits_fail -> JoinLobbyComponent:handles_fail [label=" WebRTC.ConnectionFailed"];
    WebRTCManager:emits_fail -> MultiplayerClientManager:handles_rtc [label=" WebRTC.ConnectionFailed"];

    // 4. Client Submits Code -> Coordinator
    JoinLobbyComponent:emits_submit -> GameCoordinator:handles_join_submit [label=" UI.JoinLobby.SubmitCodeClicked"];
    // GameCoordinator calls WebRTCManager.connectToHost(...)

    // 5. Host Sends Game Info -> Client Manager (via WebRTC)
    WebRTCManager:emits_msg -> MultiplayerClientManager:handles_msg [label=" WebRTC.MessageReceived (GameInfo)"];

    // 6. Client Manager Saves Custom Sheets & Emits Info -> Join Lobby UI
    MultiplayerClientManager -> QuestionsManager [label=" Calls addReceivedCustomSheet()", style=dashed];
    MultiplayerClientManager:emits_info -> JoinLobbyComponent:handles_info [label=" MP.Client.GameInfoReceived"];

    // 7. Client Confirms/Cancels Join -> Coordinator
    JoinLobbyComponent:emits_confirm -> GameCoordinator:handles_join_confirm [label=" UI.JoinLobby.ConfirmClicked"];
    JoinLobbyComponent:emits_cancel -> GameCoordinator:handles_join_cancel [label=" UI.JoinLobby.CancelClicked"];

    // 8. Client Connects / Disconnects -> Host Logic
    WebRTCManager:emits_cli_conn -> MultiplayerGame:handles_rtc [label=" WebRTC.ClientConnected"];
    WebRTCManager:emits_cli_dis -> MultiplayerGame:handles_rtc [label=" WebRTC.ClientDisconnected"];

    // 9. Host Logic Updates Player List -> WebRTC Manager -> UI Components
    MultiplayerGame -> WebRTCManager [label=" Updates Internal List", style=dashed];
    WebRTCManager:emits_player_update -> HostLobbyComponent:handles_list [label=" MP.Common.PlayerListUpdated"];
    WebRTCManager:emits_player_update -> JoinLobbyComponent:handles_state [label=" MP.Common.PlayerListUpdated"];
    WebRTCManager:emits_player_update -> PlayerListComponent:handles_state [label=" MP.Common.PlayerListUpdated"];

    // 10. Host Starts Game -> Coordinator
    HostLobbyComponent:emits_start -> GameCoordinator:handles_lobby [label=" UI.HostLobby.StartGameClicked"];

    // 11. Host Errors -> Host Lobby UI
    WebRTCManager:emits_host_error -> HostLobbyComponent:handles_error [label=" MP.Host.ErrorOccurred"];
} 