digraph MPLobby_Direct {
    rankdir=TD;
    sep="0.6";
    overlap=false;
    bgcolor="transparent";
    fontname="Arial";
    node [shape=box, style="rounded,filled", fontcolor="#eeeeee", color="#eeeeee", fontname="Arial"];
    edge [fontcolor="#eeeeee", color="#eeeeee", fontname="Arial"];
    graph [label="Multiplayer Lobby & Connection Flow (Direct Event View)", labelloc=t, fontsize=16, fontcolor="#eeeeee"];

    // Node Styles (Dark fill, specific border remains)
    MultiplayerChoiceComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                                label="{ MP Choice UI | {<emits_host> Emits: UI.HostGameRequest} | {<emits_join> Emits: UI.JoinGameRequest} }"]; // Specific emits
    HostLobbyComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                        label="{ Host Lobby UI | {<handles_rtc> Handles: WebRTC Status/Msg} | {<handles_state> Handles: MP.PlayerListUpdated} | {<emits_start> Emits: UI.StartHostedGame} }"]; // Specific emits/handles
    JoinLobbyComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                        label="{ Join Lobby UI | {<handles_rtc> Handles: WebRTC Status/Msg} | {<handles_state> Handles: MP.PlayerListUpdated} }"]; // Specific handles
    PlayerListComponent [shape="record", fillcolor="#343a40", color="#0dcaf0", penwidth=2,
                         label="{ Player List UI | {<handles_state> Handles: MP.PlayerListUpdated} }"]; // Specific handles
    GameCoordinator [shape="record", fillcolor="#343a40", color="#e6e0f8", penwidth=2,
                     label="{ GameCoordinator | {<handles_choice> Handles: UI.HostGameRequest/JoinGameRequest} | {<handles_lobby> Handles: UI.StartHostedGame} | {<emits_nav> Emits: System.Navigate} }"]; // Specific handles/emits
    UIManager [shape="record", fillcolor="#343a40", color="#e6e0f8", penwidth=2,
               label="{ UIManager | {<handles_nav> Handles: System.Navigate} }"];
    WebRTCManager [shape="record", fillcolor="#343a40", color="#ffc107", penwidth=2,
                   label="{ WebRTCManager | {<emits_init> Emits: WebRTC.HostInitialized} | {<emits_conn> Emits: WebRTC.ConnectedToHost} | {<emits_fail> Emits: WebRTC.ConnectionFailed} | {<emits_cli_conn> Emits: WebRTC.ClientConnected} | {<emits_cli_dis> Emits: WebRTC.ClientDisconnected} }"]; // Specific emits
    MultiplayerGame [shape="record", fillcolor="#343a40", color="#20c997", penwidth=2,
                     label="{ MP Game (Host Logic) | {<emits_q> Emits: MP.Question} | {<emits_score> Emits: MP.ScoreUpdate} | {<emits_result> Emits: MP.AnswerResult} | {<handles_answer> Handles: WebRTC.MessageReceived (Answer)} }"]; // Specific emits/handles
    MultiplayerClientManager [shape="record", style="rounded,filled", fillcolor="#343a40", color="#ffc107", penwidth=2,
                              label="{ MP Client Mgr | {<handles_sync> Handles: MP.Question / ScoreUpdate / AnswerResult} | {<handles_ui_in> Handles: UI.AnswerSubmitted} | {<emits_ui_out> Emits: System.UpdateGameUI} }"];
    QuizEngine [label="QuizEngine", style="rounded,filled", fillcolor="#343a40", color="#ffc107", penwidth=2];

    // EventBus: Specific events or useful groups for lobby flow
    EventBus [shape="record", fillcolor="#343a40", color="#aaaaaa", penwidth=2,
              label="{ EventBus | {<evUIHost> UI.HostGameRequest} | {<evUIJoin> UI.JoinGameRequest} | {<evUIStart> UI.StartHostedGame} | {<evWebRTC> WebRTC Status/Msg} | {<evMPState> MP.PlayerListUpdated} | {<evNav> System.Navigate} }"]; // More specific UI ports

    // 1. User Chooses Host/Join -> Coordinator (Direct Event Flows)
    MultiplayerChoiceComponent:emits_host -> GameCoordinator:handles_choice [label=" UI.HostGameRequest"];
    MultiplayerChoiceComponent:emits_join -> GameCoordinator:handles_choice [label=" UI.JoinGameRequest"];

    // 2. Coordinator Initiates Connection (Direct Call + Event)
    GameCoordinator -> WebRTCManager [label=" Calls initHost / connectToHost", style=dashed];
    GameCoordinator:emits_nav -> UIManager:handles_nav [label=" System.Navigate (to Lobby View)"]; // Direct Nav Event
    UIManager -> HostLobbyComponent [label=" Calls show()", style=dashed]; UIManager -> JoinLobbyComponent [label=" Calls show()", style=dashed];

    // 3. WebRTC Reports Status -> UI / Client Manager (Direct Event Flows)
    WebRTCManager:emits_init -> HostLobbyComponent:handles_rtc [label=" WebRTC.HostInitialized"];
    WebRTCManager:emits_conn -> JoinLobbyComponent:handles_rtc [label=" WebRTC.ConnectedToHost"];
    WebRTCManager:emits_conn -> MultiplayerClientManager:handles_rtc [label=" WebRTC.ConnectedToHost"];
    WebRTCManager:emits_fail -> JoinLobbyComponent:handles_rtc [label=" WebRTC.ConnectionFailed"];
    WebRTCManager:emits_fail -> MultiplayerClientManager:handles_rtc [label=" WebRTC.ConnectionFailed"];

    // 4. Client Connects / Disconnects -> Host (Direct Event Flow)
    WebRTCManager:emits_cli_conn -> MultiplayerGame:handles_rtc [label=" WebRTC.ClientConnected"];
    WebRTCManager:emits_cli_dis -> MultiplayerGame:handles_rtc [label=" WebRTC.ClientDisconnected"];

    // 5. Host Updates Player State -> UI (Direct Event Flows)
    MultiplayerGame:emits_state -> HostLobbyComponent:handles_state [label=" MP.PlayerListUpdated"];
    MultiplayerGame:emits_state -> JoinLobbyComponent:handles_state [label=" MP.PlayerListUpdated"];
    MultiplayerGame:emits_state -> PlayerListComponent:handles_state [label=" MP.PlayerListUpdated"];
    // Client Manager relaying state is omitted in direct view for simplicity unless explicitly needed

    // 6. Host Starts Game -> Coordinator (Direct Event Flow)
    HostLobbyComponent:emits_start -> GameCoordinator:handles_lobby [label=" UI.StartHostedGame"];
} 